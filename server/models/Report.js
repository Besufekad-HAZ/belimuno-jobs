const mongoose = require('mongoose');

const ReportSchema = new mongoose.Schema({
  // Report Basic Information
  reportId: { type: String, required: true, unique: true },
  title: { type: String, required: true },
  description: String,

  // Report Type and Category
  type: {
    type: String,
    enum: ['financial', 'performance', 'user_activity', 'job_analytics', 'regional', 'custom'],
    required: true
  },
  category: {
    type: String,
    enum: ['daily', 'weekly', 'monthly', 'quarterly', 'yearly', 'custom_period', 'real_time'],
    required: true
  },

  // Report Scope and Filters
  scope: {
    region: { type: mongoose.Schema.Types.ObjectId, ref: 'Region' },
    areaManager: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    dateRange: {
      startDate: Date,
      endDate: Date
    },
    userTypes: [String], // ['client', 'worker', 'area_manager']
    jobCategories: [String],
    statusFilters: [String]
  },

  // Generated By
  generatedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  generatedAt: { type: Date, default: Date.now },

  // Report Data and Metrics
  data: {
    // Financial Metrics
    financial: {
      totalRevenue: Number,
      platformFees: Number,
      totalPayouts: Number,
      pendingPayments: Number,
      averageJobValue: Number,
      revenueGrowth: Number
    },

    // Job Metrics
    jobs: {
      totalJobs: Number,
      completedJobs: Number,
      cancelledJobs: Number,
      disputedJobs: Number,
      averageCompletionTime: Number,
      completionRate: Number,
      jobsByCategory: [{
        category: String,
        count: Number,
        revenue: Number
      }]
    },

    // User Metrics
    users: {
      totalUsers: Number,
      newUsers: Number,
      activeUsers: Number,
      clientCount: Number,
      workerCount: Number,
      userGrowthRate: Number,
      userRetentionRate: Number
    },

    // Performance Metrics
    performance: {
      averageRating: Number,
      topPerformers: [{
        user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        metric: String,
        value: Number
      }],
      satisfactionScore: Number,
      disputeRate: Number,
      resolutionTime: Number
    },

    // Regional Metrics (if applicable)
    regional: [{
      region: { type: mongoose.Schema.Types.ObjectId, ref: 'Region' },
      metrics: {
        jobCount: Number,
        revenue: Number,
        userCount: Number,
        completionRate: Number
      }
    }],

    // Custom Metrics
    customMetrics: [{
      name: String,
      value: mongoose.Schema.Types.Mixed,
      unit: String
    }]
  },

  // Visualization and Charts Data
  charts: [{
    type: {
      type: String,
      enum: ['line', 'bar', 'pie', 'area', 'scatter']
    },
    title: String,
    data: mongoose.Schema.Types.Mixed,
    config: mongoose.Schema.Types.Mixed
  }],

  // Report Status
  status: {
    type: String,
    enum: ['generating', 'completed', 'failed', 'scheduled'],
    default: 'generating'
  },

  // Export and Sharing
  exports: [{
    format: {
      type: String,
      enum: ['pdf', 'excel', 'csv', 'json']
    },
    url: String,
    generatedAt: Date,
    downloadCount: { type: Number, default: 0 }
  }],

  isPublic: { type: Boolean, default: false },
  sharedWith: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],

  // Scheduling (for recurring reports)
  schedule: {
    isRecurring: { type: Boolean, default: false },
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'quarterly']
    },
    nextRun: Date,
    recipients: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    emailDelivery: { type: Boolean, default: false }
  },

  // Performance and Caching
  generationTime: Number, // Time taken to generate in milliseconds
  cacheExpiry: Date,
  isCached: { type: Boolean, default: false },

  // Error Handling
  errors: [{
    message: String,
    timestamp: { type: Date, default: Date.now },
    details: mongoose.Schema.Types.Mixed
  }],

  // Metadata
  tags: [String],
  notes: String,
  version: { type: Number, default: 1 },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}, { suppressReservedKeysWarning: true });

// Indexes for performance (unique index for reportId via unique:true)
// ReportSchema.index({ reportId: 1 });
ReportSchema.index({ generatedBy: 1, createdAt: -1 });
ReportSchema.index({ type: 1, category: 1 });
ReportSchema.index({ 'scope.region': 1 });
ReportSchema.index({ status: 1 });
ReportSchema.index({ 'schedule.nextRun': 1, 'schedule.isRecurring': 1 });

// Pre-save middleware
ReportSchema.pre('save', function(next) {
  this.updatedAt = Date.now();

  // Auto-generate report ID if not provided
  if (!this.reportId) {
    const dateStr = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    this.reportId = `RPT-${dateStr}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;
  }

  next();
});

module.exports = mongoose.model('Report', ReportSchema);
